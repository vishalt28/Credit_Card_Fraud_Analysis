# -*- coding: utf-8 -*-
"""Credit_Card_fraud_Analysis_using_various_technique.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EnInSI2tHqFTZBzKEqG4rtWRp726Biac

# Credit Card Anamoly Detection

### Dataset Information
The dataset contains transactions made by credit cards in September 2013 by European cardholders. This dataset presents transactions that occurred in two days, where we have 492 frauds out of 284,807 transactions. The dataset is highly unbalanced, the positive class (frauds) account for 0.172% of all transactions.

It contains only numerical input variables which are the result of a PCA transformation. Unfortunately, due to confidentiality issues, we cannot provide the original features and more background information about the data. Features V1, V2, â€¦ V28 are the principal components obtained with PCA, the only features which have not been transformed with PCA are 'Time' and 'Amount'. Feature 'Time' contains the seconds elapsed between each transaction and the first transaction in the dataset. The feature 'Amount' is the transaction Amount, this feature can be used for example-dependant cost-sensitive learning. Feature 'Class' is the response variable and it takes value 1 in case of fraud and 0 otherwise.

Given the class imbalance ratio, we recommend measuring the accuracy using the Area Under the Precision-Recall Curve (AUPRC). Confusion matrix accuracy is not meaningful for unbalanced classification.
"""



"""### Importing Libraries"""

import pandas as pd
import numpy as np
import scipy
import matplotlib.pyplot as plt
import seaborn as sns

"""## Part 1 - Data Preprocessing

### Importing the dataset
"""

data = pd.read_csv('creditcard.csv')
data.tail()

data.info()

"""## Exploratory Data Analysis"""

data.isnull().sum(axis=1)

sns.countplot(data['Class'])
plt.title('Transacion Class distribution')
plt.xticks(range(2), ['Normal', 'Fraud'])
plt.xlabel('Class')
plt.ylabel('Frequency')

pd.value_counts(data['Class'])

#Determine the number of fraud and valid transactions in the dataset
Fraud = data[data['Class'] == 1]
Normal = data[data['Class'] == 0]
outlier_fraction = len(Fraud)/float(len(Normal))

print(Fraud.shape, Normal.shape)
print(outlier_fraction)

Fraud['Amount'].describe()

Normal['Amount'].describe()

f, (ax1, ax2) = plt.subplots(2, 1, sharex=True)
f.suptitle('Amount per transaction by class')
bins = 50
ax1.hist(Fraud.Amount, bins = bins)
ax1.set_title('Fraud')
ax2.hist(Normal.Amount, bins = bins)
ax2.set_title('Normal')
plt.xlabel('Amount ($)')
plt.ylabel('Number of Transactions')
plt.xlim((0, 20000))
plt.yscale('log')
plt.show();

data_sample = data.sample(frac=0.1, random_state = 1)
data_sample.shape

"""## Correlation Matrix"""

corr = data_sample.corr()
plt.figure(figsize = (40,40))
sns.heatmap(corr, annot = True, cmap='coolwarm')

#Creating independent and dependent Features
X = data_sample.drop('Class', axis = 1)
y = data_sample['Class']
print(f"X_shape = {X.shape}, y_shape = {y.shape}")

"""## Standard Scaling"""

#Standarization the data.
from sklearn.preprocessing import StandardScaler
ss = StandardScaler()
X_scaler = ss.fit_transform(X)

X_scaler

"""# Model Prediction

Now it is time to start building the model .The types of algorithms we are going to use to try to do anomaly detection on this dataset are as follows

1. Isolation Forest Alogorithm
2. Local Outlier Factor(LOF) Algorithm
"""

from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report, f1_score
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier, IsolationForest
from sklearn.neighbors import LocalOutlierFactor
from sklearn.svm import OneClassSVM

#splitting into train test data
X_train, X_test, y_train, y_test = train_test_split(X_scaler, y, test_size = 0.3, random_state = 42, stratify = y)#unbiased

#create a class for different methods used for detecting the outliers and the Anamoly detection
classifiers_1 = {
    "Isolation_Forest_Algorithm" : IsolationForest(n_estimators=100, max_samples= len(X),contamination = outlier_fraction, random_state = 42, verbose = 0),
    "Local_Outlier_Factor": LocalOutlierFactor(n_neighbors = 20, algorithm = "auto", leaf_size = 30, metric = "minkowski", p=2, metric_params = None, contamination = outlier_fraction),
    "Support_Vector_Machine": OneClassSVM(kernel = "rbf", degree =3, gamma=0.1, nu = 0.5, max_iter = -1, )
    }

#create a class for different methods
classifiers_2 = {
    "Logistic_Regression": LogisticRegression(random_state=42),
    "Random_Forest_Classifier": RandomForestClassifier(n_estimators=100, random_state = 42),
    }

classifiers_1.items()

classifiers_2.items()

from sklearn.metrics import classification_report,accuracy_score

#training it over the whole dataset without splitting into training and testing data.
for i, (classifier_name, classifier) in enumerate(classifiers_1.items()):

  if classifier_name == "Local_Outlier_Factor":
    y_pred = classifier.fit_predict(X_scaler) 

  elif classifier_name == "Support_Vector_Machine":
    classifier.fit(X_scaler)
    y_pred = classifier.predict(X_scaler)  
  else:
    classifier.fit(X_scaler)
    y_pred = classifier.predict(X_scaler)  
  
    
  y_pred[y_pred == 1] = 0
  y_pred[y_pred == -1] = 1
  n_errors = (y_pred != y).sum()
  print("{}: {}".format(classifier_name,n_errors))
  print("Accuracy Score :")
  print(accuracy_score(y,y_pred))
  print("Classification Report :")
  print(classification_report(y,y_pred))
  print("F1 Score:",f1_score(y, y_pred))
  print("\n-------------------------------------\n")

for i, (classifier_name, classifier) in enumerate(classifiers_2.items()):
  if classifier_name == "Logistic_Regression":
    classifier.fit(X_train, y_train)
    y_pred = classifier.predict(X_test)

  elif classifier_name == "Random_Forest_Classifier":
    classifier.fit(X_train, y_train)
    y_pred = classifier.predict(X_test) 
  

  n_errors = (y_pred != y_test).sum()
  print("{}: {}".format(classifier_name,n_errors))
  print("Accuracy Score :")
  print(accuracy_score(y_test,y_pred))
  print("Classification Report :")
  print(classification_report(y_test,y_pred))
  print("F1 Score:",f1_score(y_test, y_pred))
  print("\n-------------------------------------\n")

#Lets try model boosting technique
from xgboost import XGBClassifier
classifier = XGBClassifier(n_jobs=-1)
classifier.fit(X_train, y_train)
y_pred = classifier.predict(X_test)
print("Classification Report :")
print(classification_report(y_test, y_pred))
print("F1 Score:",f1_score(y_test, y_pred))

"""# Class Imbalancement"""

sns.countplot(y_train)
plt.title('Transacion Class distribution')
plt.xticks(range(2), ['Normal', 'Fraud'])
plt.xlabel('Class')
plt.ylabel('Frequency')

!pip install imblearn

# Using SMOTE technique for increasing the number of cases in your dataset in a balanced way. The component works by generating new instances from existing minority cases that you supply as input.
from imblearn.over_sampling import SMOTE
over_sample = SMOTE()
X_smote, y_smote = over_sample.fit_resample(X_train, y_train)
X_df, y_df = over_sample.fit_resample(X_scaler, y)

sns.countplot(y_smote)
plt.title('Transacion Class distribution')
plt.xticks(range(2), ['Normal', 'Fraud'])
plt.xlabel('Class')
plt.ylabel('Frequency')

for i, (classifier_name, classifier) in enumerate(classifiers_2.items()):
  if classifier_name == "Logistic_Regression":
    classifier.fit(X_smote, y_smote)
    y_pred = classifier.predict(X_test)

  elif classifier_name == "Random_Forest_Classifier":
    classifier.fit(X_smote, y_smote)
    y_pred = classifier.predict(X_test) 
  

  n_errors = (y_pred != y_test).sum()
  print("{}: {}".format(classifier_name,n_errors))
  print("Accuracy Score :")
  print(accuracy_score(y_test,y_pred))
  print("Classification Report :")
  print(classification_report(y_test,y_pred))
  print("F1 Score:",f1_score(y_test, y_pred))
  print("\n-------------------------------------\n")

"""Observations :


*  Isolation Forest detected 73 errors versus Local Outlier Factor detecting 97 errors vs. SVM detecting 8516 errors versus Logistic_Regression detecting 10 errors versus Random_Forest_Classifier detecting 6 errors before applying SMOTE.
*   After applying SMOTE technique, Logistic_Regression detecting 132 errors versus Random_Forest_Classifier detecting 6 errors.
*   Isolation Forest has a 99.74% more accurate than LOF of 99.66%, SVM of 50.12%, Logistic_Regression has a 98.45% and Random_Forest_Classifier has a 99.93% accuracy. When comparing error precision & recall for 5 models , the Random_Forest_Classifier and Isolation Forest performed much better than the LOF and rest as we can see that the detection of fraud cases in Random Forest is around 77% versus Logistic Regression is around 15.3% versus Isolation Forest is around 26.2 % versus LOF detection rate of just 4 % and SVM of 0.66%.
* So overall Random Forest Method and then Isolation Forest performed much better in determining the fraud cases which is around 77% and 26.2% then others.
* We can also improve on this accuracy by increasing the sample size or use deep learning algorithms however at the cost of computational expense.We can also use complex anomaly detection models to get better accuracy in determining more fraudulent cases.
"""

